#include "tophead.h"
#include "tdrstyle.C"
#include "TColor.h"
#include "TF1.h"
#include "TLegend.h"

#ifdef __MAKECINT__
#pragma link C++ class vector<int>;
#pragma link C++ class vector<vector<int> >;
#pragma link C++ class vector<vector<vector<int> > >;
#pragma link C++ class vector<TLorentzVector>;
#pragma link C++ class vector<vector<TLorentzVector> >;
#endif

using namespace std;

const double cutCSVS = 0.679;
const double defaultMETcut = 200;
const double highMETcut = 350;

static const int minnJetsSelBagged = 1, maxnJetsSelBagged = -1;

const double minMETcut = 200, maxMETcut = -1;

static const int nMuonsSel = 0, nElectronsSel = 0;

static const int nJetsSel = 5, nJetsSelPt30Eta24 = 5, nJetsSelPt50Eta24 = 4, nJetsSelPt70Eta24 = 2;
static const double minJetPt = 30;
//                                    minAbsEta, maxAbsEta, minPt, maxPt
static const double      pt30Arr[] = {   -1,        -1,      30,    -1  };
static const double pt30Eta24Arr[] = {   -1,       2.4,      30,    -1  };
static const double pt50Eta24Arr[] = {   -1,       2.4,      50,    -1  };
static const double pt70Eta24Arr[] = {   -1,       2.4,      70,    -1  };
static const double      dphiArr[] = {   -1,       4.7,      30,    -1  };
static const double      bTagArr[] = {   -1,       2.4,      30,    -1  };

static const double pt50Arr[] = {   -1,        -1,      50,    -1  };
static const double pt70Arr[] = {   -1,        -1,      70,    -1  };

const string      mcStr[] = {   "TTbar_8TeV", "TTbar_PUS14", "TTbar_PU20bx25" };
const double    xSecArr[] = {            234,      234,            234        };
const int       nEvtArr[] = {       21671578,  1000000,        1000000        };
static const int colors[] = {         kBlack,    kBlue,           kRed        };

const int nMC = sizeof(mcStr)/sizeof(mcStr[0]);

int adjustbJetsCSVS(const vector<TLorentzVector> &inputJets, vector<double> &inputCSVS, const double CSVS, const double *jetCutsArr);
int adjustbJetsCSVS(const vector<TLorentzVector> &inputJets, vector<double> &inputCSVS, const double CSVS, const double minAbsEta, const double maxAbsEta, const double minPt, const double maxPt);

int countJets(const vector<TLorentzVector> &inputJets, const double *jetCutsArr);
int countJets(const vector<TLorentzVector> &inputJets, const double minAbsEta = -1.0, const double maxAbsEta = -1.0, const double minPt = 30.0, const double maxPt = -1.0);
int countCSVS(const vector<TLorentzVector> &inputJets, const vector<double> &inputCSVS, const double CSVS, const double *jetCutsArr);
int countCSVS(const vector<TLorentzVector> &inputJets, const vector<double> &inputCSVS, const double CSVS = 0.679, const double minAbsEta = -1.0, const double maxAbsEta = -1.0, const double minPt = 30.0, const double maxPt = -1.0);
vector<double> calcDPhi(const vector<TLorentzVector> &inputJets, const double metphi, const int nDPhi, const double *jetCutsArr);
vector<double> calcDPhi(const vector<TLorentzVector> &inputJets, const double metphi, const int nDPhi = 3, const double minAbsEta = -1, const double maxAbsEta = 4.7, const double minPt = 30, const double maxPt = -1);

TRandom3 *picker =0;

const TString treeStrT = "stdStop_histAndTree"; TString extraDrawStrT = "";

static const double dataLumi = (803.197 + 82.136 + 4.385*1000 + 6.397*1000 + 495.003 + 7.266*1000)/1000.; // in fb-1
const double scaledToDataLumi = dataLumi; // in fb-1

double dataScale = 1.0;

vector<double> scalesVec;

vector<double> puWeights_;

double weightTruNPV(int trunpv);
int initPUinput(const std::string &puDatafileName, const std::string &puDatahistName);

double template_cntEventsWeighted =0, template_cntEventsWeightedSquared =0;
double template_cntAftBaselineWeighted =0, template_cntAftBaselineWeightedSquared =0;

double template_cntEventsWeightedScaledMC = 0, template_cntEventsWeightedErrorScaledMC = 0; 
double template_cntAftBaselineWeightedScaledMC = 0, template_cntAftBaselineWeightedErrorScaledMC = 0;

vector<string> keyStringCachedVec;
vector<double> scaleMCCachedVec;
vector<int> colorCachedVec;

void draw1DallINone(TCanvas *cs, const int lastPadIdx, const vector<TH1D*> &h1_inputVec, const int nRebin =1, const TString optDrawStr ="");
void draw2DallINone(TCanvas *cs, const int lastPadIdx, const vector<TH2D*> &h2_inputVec);

string keyStrForTheStage = "optimization";

std::vector<ULong64_t> evtIDvec;
std::vector<bool> evtPassBasicvec, evtPassStopvec;

TStopwatch timer;

vector<TH1D*> h1_metVec, h1_metphiVec;
vector<TH1D*> h1_met_allhadVec, h1_metphi_allhadVec;
vector<TH1D*> h1_met_leptonicVec, h1_metphi_leptonicVec;

vector<TH1D*> h1_nJetsVec, h1_nJets_allhadVec, h1_nJets_leptonicVec;
vector<TH1D*> h1_vtxSizeVec;

void drawOverFlowBin(TH1 *histToAdjust){
   int nbins = histToAdjust->GetXaxis()->GetNbins();
   double overflow = histToAdjust->GetBinContent(nbins+1);
   double lastCont = histToAdjust->GetBinContent(nbins);
   histToAdjust->SetBinContent(nbins, overflow+lastCont);
}

void initMCscales(){

   dataScale = scaledToDataLumi/dataLumi;
   cout<<"\nscaledToDataLumi : "<<scaledToDataLumi<<"  dataLumi : "<<dataLumi<<"  dataScale : "<<dataScale<<endl;
   for(int ib=0; ib<nMC; ib++){
      double perScale = scaledToDataLumi/(nEvtArr[ib]/xSecArr[ib]/1000.);
      scalesVec.push_back(perScale);
      printf("%30s    xSec : %8.3e  nEvt : %10d  scale : %10.8f\n", mcStr[ib].c_str(), xSecArr[ib], nEvtArr[ib], perScale);
   }
   cout<<endl;
}

void templatePlotsFunc(std::vector<TTree *> treeVec, const std::vector<std::string> &subSampleKeysVec, const std::string sampleKeyString="ttbar", int verbose=0){

  TString sampleKeyStringT(sampleKeyString);

  keyStringCachedVec.push_back(sampleKeyString);
  double sampleScaleMC = 1.0; int sampleColor = 1;
  for(int ib=0; ib<nMC; ib++){
     TString permcStrT(mcStr[ib]);
     if( permcStrT.Contains(sampleKeyString) ) { sampleColor = colors[ib]; } 
  }
  scaleMCCachedVec.push_back( sampleScaleMC );
  colorCachedVec.push_back( sampleColor );

  template_cntEventsWeightedScaledMC = 0;
  template_cntEventsWeightedErrorScaledMC = 0; 
  template_cntAftBaselineWeightedScaledMC = 0; template_cntAftBaselineWeightedErrorScaledMC = 0;

  TH1D *template_h1_met = new TH1D(sampleKeyStringT+"_h1_met", sampleKeyStringT+":  met; met", 100, 0, 1000); template_h1_met->Sumw2();
  TH1D *template_h1_metphi = new TH1D(sampleKeyStringT+"_h1_metphi", sampleKeyStringT+":  metphi; metphi", 100, -3.2, 3.2); template_h1_metphi->Sumw2();

  TH1D *template_h1_met_allhad = new TH1D(sampleKeyStringT+"_h1_met_allhad", sampleKeyStringT+":  met_allhad; met_allhad", 100, 0, 1000); template_h1_met_allhad->Sumw2();
  TH1D *template_h1_metphi_allhad = new TH1D(sampleKeyStringT+"_h1_metphi_allhad", sampleKeyStringT+":  metphi_allhad; metphi_allhad", 100, -3.2, 3.2); template_h1_metphi_allhad->Sumw2();

  TH1D *template_h1_met_leptonic = new TH1D(sampleKeyStringT+"_h1_met_leptonic", sampleKeyStringT+":  met_leptonic; met_leptonic", 100, 0, 1000); template_h1_met_leptonic->Sumw2();
  TH1D *template_h1_metphi_leptonic = new TH1D(sampleKeyStringT+"_h1_metphi_leptonic", sampleKeyStringT+":  metphi_leptonic; metphi_leptonic", 100, -3.2, 3.2); template_h1_metphi_leptonic->Sumw2();

  TH1D *template_h1_nJets = new TH1D(sampleKeyStringT+"_h1_nJets", sampleKeyStringT+":  number of jets; nJets", 20, 0, 20); template_h1_nJets->Sumw2();
  TH1D *template_h1_nJets_allhad = new TH1D(sampleKeyStringT+"_h1_nJets_allhad", sampleKeyStringT+":  number of jets; nJets_allhad", 20, 0, 20); template_h1_nJets_allhad->Sumw2();
  TH1D *template_h1_nJets_leptonic = new TH1D(sampleKeyStringT+"_h1_nJets_leptonic", sampleKeyStringT+":  number of jets; nJets_leptonic", 20, 0, 20); template_h1_nJets_leptonic->Sumw2();
  TH1D *template_h1_vtxSize = new TH1D(sampleKeyStringT+"_h1_vtxSize", sampleKeyStringT+":  number of vertices; vtxSize", 100, 0, 100); template_h1_vtxSize->Sumw2();

  for(unsigned int ist=0; ist<subSampleKeysVec.size(); ist++){
 
     bool isData = false;

     std::string keyString = subSampleKeysVec[ist];

     double scaleMC = 1.0;
//     for(int ib=0; ib<nMC; ib++){ if( mcStr[ib] == keyString ){ scaleMC = scalesVec[ib]; } }
     TString keyStringT(keyString);
//     if( keyStringT.Contains("Data") ){ scaleMC = dataScale; isData = true; }

     int template_run, template_event, template_lumi, template_nm1, template_n0, template_np1, template_vtxSize;
     double template_avg_npv, template_tru_npv;
     int template_nJets;
     double template_evtWeight;
     double template_met, template_metphi;
     
     int template_nMuons, template_nElectrons;

     vector<TLorentzVector> *template_oriJetsVec = new vector<TLorentzVector>(); vector<double> *template_recoJetsBtagCSVS = new vector<double>();

     vector<TLorentzVector> *template_genDecayLVec =0;
     vector<int> *template_genDecayPdgIdVec =0, *template_genDecayIdxVec =0, *template_genDecayMomIdxVec =0;
     vector<string> *template_genDecayStrVec =0, *template_smsModelFileNameStrVec =0, *template_smsModelStrVec =0;
     double template_smsModelMotherMass, template_smsModelDaughterMass;

     vector<TLorentzVector> *template_genJetsLVec_myak5GenJetsNoNu =0, *template_genJetsLVec_myak5GenJetsNoNuNoStopDecays =0, *template_genJetsLVec_myak5GenJetsNoNuOnlyStopDecays =0;

     TTree * template_AUX = treeVec[ist];
     template_AUX->SetBranchStatus("*", 0);

     template_AUX->SetBranchStatus("run", 1); template_AUX->SetBranchAddress("run", &template_run);
     template_AUX->SetBranchStatus("event", 1); template_AUX->SetBranchAddress("event", &template_event);
     template_AUX->SetBranchStatus("lumi", 1); template_AUX->SetBranchAddress("lumi", &template_lumi);
     template_AUX->SetBranchStatus("avg_npv", 1); template_AUX->SetBranchAddress("avg_npv", &template_avg_npv);
     template_AUX->SetBranchStatus("nm1", 1); template_AUX->SetBranchAddress("nm1", &template_nm1);
     template_AUX->SetBranchStatus("n0", 1); template_AUX->SetBranchAddress("n0", &template_n0);
     template_AUX->SetBranchStatus("np1", 1); template_AUX->SetBranchAddress("np1", &template_np1);
     template_AUX->SetBranchStatus("tru_npv", 1); template_AUX->SetBranchAddress("tru_npv", &template_tru_npv);
     template_AUX->SetBranchStatus("vtxSize", 1); template_AUX->SetBranchAddress("vtxSize", &template_vtxSize);
     template_AUX->SetBranchStatus("nJets", 1); template_AUX->SetBranchAddress("nJets", &template_nJets);
     template_AUX->SetBranchStatus("jetsLVec", 1); template_AUX->SetBranchAddress("jetsLVec", &template_oriJetsVec);
     template_AUX->SetBranchStatus("recoJetsBtag_0", 1); template_AUX->SetBranchAddress("recoJetsBtag_0", &template_recoJetsBtagCSVS);
     template_AUX->SetBranchStatus("evtWeight", 1); template_AUX->SetBranchAddress("evtWeight", &template_evtWeight);
     template_AUX->SetBranchStatus("met", 1); template_AUX->SetBranchAddress("met", &template_met);
     template_AUX->SetBranchStatus("metphi", 1); template_AUX->SetBranchAddress("metphi", &template_metphi);

     template_AUX->SetBranchStatus("nMuons", 1); template_AUX->SetBranchAddress("nMuons", &template_nMuons);
     template_AUX->SetBranchStatus("nElectrons", 1); template_AUX->SetBranchAddress("nElectrons", &template_nElectrons);

     template_AUX->SetBranchStatus("genDecayLVec", 1); template_AUX->SetBranchAddress("genDecayLVec", &template_genDecayLVec);
     template_AUX->SetBranchStatus("genDecayPdgIdVec", 1); template_AUX->SetBranchAddress("genDecayPdgIdVec", &template_genDecayPdgIdVec);
     template_AUX->SetBranchStatus("genDecayIdxVec", 1); template_AUX->SetBranchAddress("genDecayIdxVec", &template_genDecayIdxVec);
     template_AUX->SetBranchStatus("genDecayMomIdxVec", 1); template_AUX->SetBranchAddress("genDecayMomIdxVec", &template_genDecayMomIdxVec);
     template_AUX->SetBranchStatus("genDecayStrVec", 1); template_AUX->SetBranchAddress("genDecayStrVec", &template_genDecayStrVec);

     int template_Entries = template_AUX->GetEntries();
     std::cout<<"\n\n"<<keyString.c_str()<<"_Entries : "<<template_Entries<<"  scaleMC : "<<scaleMC<<std::endl;
   
     ofstream evtlistFile;
     if( keyStringT.Contains("Data") ) evtlistFile.open("evtlistData_aftAllCuts.txt");

     template_cntEventsWeighted =0; template_cntEventsWeightedSquared =0;
     template_cntAftBaselineWeighted =0; template_cntAftBaselineWeightedSquared =0;

     for(int ie=0; ie<template_Entries; ie++){

        template_AUX->GetEntry(ie);
 
        if( ie==0 || ie == template_Entries-1 || ie%(template_Entries/10) == 0 ) std::cout<<"\n   Processing the "<<ie<<"th event ..."<<std::endl;

        double puWeight = 1.0;
        if( !keyStringT.Contains("Signal") && !keyStringT.Contains("Data") ){
//           puWeight = weightTruNPV(NumPUInteractions);
        }

        if( template_oriJetsVec->size() != template_recoJetsBtagCSVS->size() ){
           std::cout<<"template_oriJetsVec->size : "<<template_oriJetsVec->size()<<"  template_recoJetsBtagCSVS : "<<template_recoJetsBtagCSVS->size()<<std::endl;
        }

        TLorentzVector metLVec; metLVec.SetPtEtaPhiM(template_met, 0, template_metphi, 0);

        int cntCSVS = countCSVS((*template_oriJetsVec), (*template_recoJetsBtagCSVS), cutCSVS, bTagArr);
        int cntNJetsPt30 = countJets((*template_oriJetsVec), pt30Arr);
        int cntNJetsPt30Eta24 = countJets((*template_oriJetsVec), pt30Eta24Arr);
        int cntNJetsPt50Eta24 = countJets((*template_oriJetsVec), pt50Eta24Arr);
        int cntNJetsPt70Eta24 = countJets((*template_oriJetsVec), pt70Eta24Arr);
        vector<double> dPhiVec = calcDPhi((*template_oriJetsVec), template_metphi, 3, dphiArr);

        double dPhi0 = dPhiVec[0], dPhi1 = dPhiVec[1], dPhi2 = dPhiVec[2];

        bool passExtraCuts = true;
        bool passnJets = true, passdPhis = true, passBJets = true, passMET = true;

        if( cntNJetsPt70Eta24 < nJetsSelPt70Eta24 ){ passExtraCuts = false; passnJets = false; }
        if( cntNJetsPt50Eta24 < nJetsSelPt50Eta24 ){ passExtraCuts = false; passnJets = false; }
        if( cntNJetsPt30Eta24 < nJetsSelPt30Eta24 ){ passExtraCuts = false; passnJets = false; }

        if( dPhi0 < 0.5 || dPhi1 < 0.5 || dPhi2 < 0.3 ){ passExtraCuts = false; passdPhis = false; }
        if( !( ( minnJetsSelBagged == -1 || cntCSVS >= minnJetsSelBagged) && (maxnJetsSelBagged ==-1 || cntCSVS < maxnJetsSelBagged ) ) ){ passExtraCuts = false; passBJets = false; }

        if( !( (minMETcut == -1 || template_met >= minMETcut ) && (maxMETcut == -1 || template_met < maxMETcut) ) ){ passExtraCuts = false; passMET = false; }

// Parsing the gen information ...
        int cntgenTop = 0, cntleptons =0;

        for(int iv=0; iv<(int)template_genDecayLVec->size(); iv++){
           int pdgId = template_genDecayPdgIdVec->at(iv);
           if( abs(pdgId) == 6 ) cntgenTop ++;
           if( abs(pdgId) == 11 || abs(pdgId) == 13 || abs(pdgId) == 15 ) cntleptons++;
        }

        template_cntEventsWeighted += template_evtWeight * puWeight;
        template_cntEventsWeightedSquared += pow(template_evtWeight * puWeight, 2.0);

        template_h1_vtxSize->Fill(template_vtxSize, template_evtWeight * puWeight * scaleMC);

        template_h1_nJets->Fill(cntNJetsPt30Eta24, template_evtWeight * puWeight * scaleMC);

        template_h1_met->Fill(template_met, template_evtWeight * puWeight * scaleMC);
        template_h1_metphi->Fill(template_metphi, template_evtWeight * puWeight * scaleMC);

        if( cntleptons ==0 ){
           template_h1_nJets_allhad->Fill(cntNJetsPt30Eta24, template_evtWeight * puWeight * scaleMC);
           template_h1_met_allhad->Fill(template_met, template_evtWeight * puWeight * scaleMC);
           template_h1_metphi_allhad->Fill(template_metphi, template_evtWeight * puWeight * scaleMC);
        }else{
           template_h1_nJets_leptonic->Fill(cntNJetsPt30Eta24, template_evtWeight * puWeight * scaleMC);
           template_h1_met_leptonic->Fill(template_met, template_evtWeight * puWeight * scaleMC);
           template_h1_metphi_leptonic->Fill(template_metphi, template_evtWeight * puWeight * scaleMC);
        }

        if( verbose >=1 ){
           std::cout<<"\nie : "<<ie<<std::endl; 
           std::cout<<"genDecayStr : "<<template_genDecayStrVec->front().c_str()<<std::endl;
           for(int iv=0; iv<(int)template_genDecayLVec->size(); iv++){
              int pdgId = template_genDecayPdgIdVec->at(iv);
              printf("((%d,%d/%d):(%6.2f/%6.2f))  ", pdgId, template_genDecayIdxVec->at(iv), template_genDecayMomIdxVec->at(iv), template_genDecayLVec->at(iv).E(), template_genDecayLVec->at(iv).Pt());
           }
        }
     }

     template_cntEventsWeightedScaledMC += template_cntEventsWeighted * scaleMC;
     template_cntEventsWeightedErrorScaledMC += template_cntEventsWeighted * scaleMC * scaleMC;

  } 

  template_cntEventsWeightedErrorScaledMC = sqrt(template_cntEventsWeightedErrorScaledMC);

  std::cout<<sampleKeyString.c_str()<<"_cntEventsWeightedScaledMC : "<<template_cntEventsWeightedScaledMC<<" +- "<<template_cntEventsWeightedErrorScaledMC<<std::endl;

  h1_metVec.push_back((TH1D*)template_h1_met->Clone());
  h1_metphiVec.push_back((TH1D*)template_h1_metphi->Clone());

  h1_met_allhadVec.push_back((TH1D*)template_h1_met_allhad->Clone());
  h1_metphi_allhadVec.push_back((TH1D*)template_h1_metphi_allhad->Clone());

  h1_met_leptonicVec.push_back((TH1D*)template_h1_met_leptonic->Clone());
  h1_metphi_leptonicVec.push_back((TH1D*)template_h1_metphi_leptonic->Clone());

  h1_nJetsVec.push_back((TH1D*)template_h1_nJets->Clone()); h1_nJets_allhadVec.push_back((TH1D*)template_h1_nJets_allhad->Clone()); h1_nJets_leptonicVec.push_back((TH1D*)template_h1_nJets_leptonic->Clone());

  h1_vtxSizeVec.push_back((TH1D*)template_h1_vtxSize->Clone());
}

void forCSA14(){

  std::cout<<"\n"<<std::endl; timer.Print(); timer.Start();

  picker = new TRandom3(glbfSeed);

  gROOT->ProcessLine(".L tdrstyle.C");
  setTDRStyle();

  initMCscales();

  initPUinput("PUData_dist.root", "pileup");

  std::vector<TTree*> treeVec;
  std::vector<std::string> subSampleKeysVec;

  char filenames[500], names[500];
  std::vector<std::string> filesTTJets_8TeVVec, filesTTJets_PUS14Vec, filesTTJets_PU20bx25Vec;

  ifstream finTTJets_8TeV("filelist_TTJets_8TeV.txt"); while( finTTJets_8TeV.getline(filenames, 500) ){ filesTTJets_8TeVVec.push_back(filenames); }
  ifstream finTTJets_PUS14("filelist_TTJets_PUS14.txt"); while( finTTJets_PUS14.getline(filenames, 500) ){ filesTTJets_PUS14Vec.push_back(filenames); }
  ifstream finTTJets_PU20bx25("filelist_TTJets_PU20bx25.txt"); while( finTTJets_PU20bx25.getline(filenames, 500) ){ filesTTJets_PU20bx25Vec.push_back(filenames); }

/*
// TTJets
  std::cout<<"\nProcessing TTJets ... "<<std::endl;
  treeVec.clear(); subSampleKeysVec.clear();
  TChain *TTJets_AUX = new TChain(treeStrT+"/AUX");
  for(unsigned int in=0; in<filesTTJetsVec.size(); in++){ TTJets_AUX->Add(filesTTJetsVec.at(in).c_str()); }
  treeVec.push_back(TTJets_AUX); subSampleKeysVec.push_back("TTbar");
  templatePlotsFunc(treeVec, subSampleKeysVec, "TTbar");

  std::cout<<std::endl; timer.Stop(); timer.Print(); timer.Continue();
*/

// TTJets_PUS14
  std::cout<<"\nProcessing TTJets_PUS14 ... "<<std::endl;
  treeVec.clear(); subSampleKeysVec.clear();
  TChain *TTJets_PUS14_AUX = new TChain(treeStrT+"/AUX");
  for(unsigned int in=0; in<filesTTJets_PUS14Vec.size(); in++){ TTJets_PUS14_AUX->Add(filesTTJets_PUS14Vec.at(in).c_str()); }
  treeVec.push_back(TTJets_PUS14_AUX); subSampleKeysVec.push_back("TTbar_PUS14");
  templatePlotsFunc(treeVec, subSampleKeysVec, "TTbar_PUS14");

  std::cout<<std::endl; timer.Stop(); timer.Print(); timer.Continue();

// TTJets_PU20bx25
  std::cout<<"\nProcessing TTJets_PU20bx25 ... "<<std::endl;
  treeVec.clear(); subSampleKeysVec.clear();
  TChain *TTJets_PU20bx25_AUX = new TChain(treeStrT+"/AUX");
  for(unsigned int in=0; in<filesTTJets_PU20bx25Vec.size(); in++){ TTJets_PU20bx25_AUX->Add(filesTTJets_PU20bx25Vec.at(in).c_str()); }
  treeVec.push_back(TTJets_PU20bx25_AUX); subSampleKeysVec.push_back("TTbar_PU20bx25");
  templatePlotsFunc(treeVec, subSampleKeysVec, "TTbar_PU20bx25");

  std::cout<<std::endl; timer.Stop(); timer.Print(); timer.Continue();

// TTJets_8TeV
  std::cout<<"\nProcessing TTJets_8TeV ... "<<std::endl;
  treeVec.clear(); subSampleKeysVec.clear();
  TChain *TTJets_8TeV_AUX = new TChain(treeStrT+"/AUX");
  for(unsigned int in=0; in<filesTTJets_8TeVVec.size(); in++){ TTJets_8TeV_AUX->Add(filesTTJets_8TeVVec.at(in).c_str()); }
  treeVec.push_back(TTJets_8TeV_AUX); subSampleKeysVec.push_back("TTbar_8TeV");
  templatePlotsFunc(treeVec, subSampleKeysVec, "TTbar_8TeV");

  std::cout<<std::endl; timer.Stop(); timer.Print(); timer.Continue();

// Plotting

     //  For the frame
  tdrStyle->SetFrameBorderMode(0);
  tdrStyle->SetFrameBorderSize(1);
  tdrStyle->SetFrameFillColor(kBlack);
  tdrStyle->SetFrameFillStyle(0);
  tdrStyle->SetFrameLineColor(kBlack);
  tdrStyle->SetFrameLineStyle(0);
  tdrStyle->SetFrameLineWidth(1);

     //  For the Pad
  tdrStyle->SetPadBorderMode(0);
  tdrStyle->SetPadColor(kWhite);
  tdrStyle->SetPadGridX(false);
  tdrStyle->SetPadGridY(false);
  tdrStyle->SetGridColor(0);
  tdrStyle->SetGridStyle(3);
  tdrStyle->SetGridWidth(1);

     //  For the axis
  tdrStyle->SetAxisColor(1,"XYZ");
  tdrStyle->SetTickLength(0.03,"XYZ");
  tdrStyle->SetNdivisions(505,"XYZ");
  tdrStyle->SetPadTickX(1);
  tdrStyle->SetPadTickY(1);
  tdrStyle->SetStripDecimals(kFALSE);

  tdrStyle->SetLabelSize(0.050, "XYZ");

  tdrStyle->SetPadTopMargin(0.1); tdrStyle->SetPadBottomMargin(0.15);
  tdrStyle->SetPadLeftMargin(0.15); tdrStyle->SetPadRightMargin(0.15);

  tdrStyle->SetOptStat(1111);

  tdrStyle->SetHistLineWidth(1);

  tdrStyle->SetPaintTextFormat("4.2f");

  unsigned int ntype = keyStringCachedVec.size();
  std::cout<<"\nntype : "<<ntype<<std::endl;

  TCanvas *cs = new TCanvas("cs", "cs", 1200, 900);
  int divW=2, divH=2;
  cs->Divide(divW, divH);

  cs->Print("allINone_"+treeStrT+".pdf[");
  draw1DallINone(cs, divW*divH, h1_metVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  draw1DallINone(cs, divW*divH, h1_metphiVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");

  draw1DallINone(cs, divW*divH, h1_met_allhadVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  draw1DallINone(cs, divW*divH, h1_metphi_allhadVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");

  draw1DallINone(cs, divW*divH, h1_met_leptonicVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  draw1DallINone(cs, divW*divH, h1_metphi_leptonicVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");

  draw1DallINone(cs, divW*divH, h1_nJetsVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  draw1DallINone(cs, divW*divH, h1_nJets_allhadVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  draw1DallINone(cs, divW*divH, h1_nJets_leptonicVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");

  draw1DallINone(cs, divW*divH, h1_vtxSizeVec, 1, extraDrawStrT); cs->Print("allINone_"+treeStrT+".pdf");
  cs->Print("allINone_"+treeStrT+".pdf]");

  TFile * outfile = new TFile("out_CSA14.root", "RECREATE");
  for(unsigned int iv=0; iv<h1_metVec.size(); iv++){
     h1_metVec[iv]->Write(); h1_metphiVec[iv]->Write();
     h1_met_allhadVec[iv]->Write(); h1_metphi_allhadVec[iv]->Write();
     h1_met_leptonicVec[iv]->Write(); h1_metphi_leptonicVec[iv]->Write();

     h1_nJetsVec[iv]->Write(); h1_nJets_allhadVec[iv]->Write(); h1_nJets_leptonicVec[iv]->Write();
     h1_vtxSizeVec[iv]->Write();
  }
  outfile->Write(); outfile->Close();
}

// Handle my default value of trunpv==-1, this is the case for data.
double weightTruNPV(int trunpv){
      
   double w = 1.;
   if (trunpv < static_cast<int> (puWeights_.size()) && trunpv >=0) {
      w = puWeights_.at(trunpv);
   } else if( trunpv >= static_cast<int> (puWeights_.size()) ) {
      std::cerr << "WARNING ... number of PU vertices = " << trunpv
            << " out of histogram binning." << std::endl;
   }  
      
   return w;
}     
      
int initPUinput(const std::string &puDatafileName, const std::string &puDatahistName){

   puWeights_.clear();

   TFile *puDatafile = new TFile(puDatafileName.c_str());
   TH1D *data_npu_estimated = (TH1D*) puDatafile->Get(puDatahistName.c_str());

   double Summer12_S10[60] = {
      2.560E-06,
      5.239E-06,
      1.420E-05,
      5.005E-05,
      1.001E-04,
      2.705E-04,
      1.999E-03,
      6.097E-03,
      1.046E-02,
      1.383E-02,
      1.685E-02,
      2.055E-02,
      2.572E-02,
      3.262E-02,
      4.121E-02,
      4.977E-02,
      5.539E-02,
      5.725E-02,
      5.607E-02,
      5.312E-02,
      5.008E-02,
      4.763E-02,
      4.558E-02,
      4.363E-02,
      4.159E-02,
      3.933E-02,
      3.681E-02,
      3.406E-02,
      3.116E-02,
      2.818E-02,
      2.519E-02,
      2.226E-02,
      1.946E-02,
      1.682E-02,
      1.437E-02,
      1.215E-02,
      1.016E-02,
      8.400E-03,
      6.873E-03,
      5.564E-03,
      4.457E-03,
      3.533E-03,
      2.772E-03,
      2.154E-03,
      1.656E-03,
      1.261E-03,
      9.513E-04,
      7.107E-04,
      5.259E-04,
      3.856E-04,
      2.801E-04,
      2.017E-04,
      1.439E-04,
      1.017E-04,
      7.126E-05,
      4.948E-05,
      3.405E-05,
      2.322E-05,
      1.570E-05,
      5.005E-06
   };

   puWeights_.resize(60);
   double s = 0.0;
   for (int npu = 0; npu < 60; ++npu) {
      double npu_estimated = data_npu_estimated->GetBinContent(data_npu_estimated->GetXaxis()->FindBin(npu));
      puWeights_[npu] = npu_estimated / Summer12_S10[npu];
      s += npu_estimated;
   }

   // normalize weights such that the total sum of weights over the whole sample is 1.0, i.e., sum_i  puWeights_[i] * Summer2012[i] should be 1.0 (!)
   for (int npu = 0; npu < 60; ++npu) {
      puWeights_[npu] /= s;
   }

   return 1;
}

void draw2DallINone(TCanvas *cs, const int lastPadIdx, const vector<TH2D*> &h2_inputVec){

  int cntPadIdx = 0;
  unsigned int ntype = keyStringCachedVec.size();

  for(unsigned int it=0; it<ntype; it++){
     if( it == 0 ) cntPadIdx = 0;
     TString keyStringT(keyStringCachedVec[it]); 
     if( keyStringT.Contains("DYJets") || keyStringCachedVec[it] == "T_t" ) continue; 
     cntPadIdx ++;
     if( cntPadIdx >= lastPadIdx ){ /*std::cout<<"Overwritten the last pad with index : "<<lastPadIdx<<"! Please make sure enough pads are created!"<<std::endl;*/ cntPadIdx = lastPadIdx; }

     cs->cd(cntPadIdx); TPad * pad = (TPad*) cs->GetPad(cntPadIdx); pad->Clear(); pad->SetLogy(0);
     h2_inputVec[it]->Draw("colz");
  }

  for(int ic=cntPadIdx+1; ic<=lastPadIdx; ic++){ cs->cd(ic); TPad * pad = (TPad*) cs->GetPad(ic); pad->Clear(); }
}


void draw1DallINone(TCanvas *cs, const int lastPadIdx, const vector<TH1D*> &h1_inputVec, const int nRebin, const TString optDrawStr){
  
  int statusLogy = 0;
  if( optDrawStr.Contains("SetLogy") ) statusLogy =1;
  int doNormalization = 0;
  if( optDrawStr.Contains("normalization") ) doNormalization =1;

  int cntPadIdx = 0;
  vector<TH1D*> h1_stackedVec; TH1D * h1_dataCached =0, * h1_signal1Cached =0, *h1_signal2Cached =0;

  vector<TString> stackedKeyStringTVec;

  unsigned int ntype = keyStringCachedVec.size();

  for(unsigned int it=0; it<ntype; it++){

     TString keyStringT(keyStringCachedVec[it]); 

     if( it == 0 ){ cntPadIdx = 0; h1_stackedVec.clear(); }

     if( keyStringT.Contains("DYJets") || keyStringCachedVec[it] == "T_t" ) continue; 
     cntPadIdx ++;
     if( cntPadIdx >= lastPadIdx ){ /*std::cout<<"Overwritten the last pad with index : "<<lastPadIdx<<"! Please make sure enough pads are created!"<<std::endl;*/ cntPadIdx = lastPadIdx; }

     cs->cd(cntPadIdx); TPad * pad = (TPad*) cs->GetPad(cntPadIdx); pad->Clear(); pad->SetLogy(statusLogy);

     TH1D *tmpHist = (TH1D*) h1_inputVec[it]->Clone(); 

     tmpHist->Rebin(nRebin); tmpHist->Scale(scaleMCCachedVec[it]); 

     tmpHist->SetLineColor(colorCachedVec[it]); tmpHist->SetMarkerColor(colorCachedVec[it]); tmpHist->SetMarkerStyle(6); tmpHist->SetMarkerSize(0.25);

     if( keyStringT.Contains("Data") ){ tmpHist->SetLineColor(kBlack); tmpHist->SetMarkerColor(kBlack); }

     if( !statusLogy ){
        tmpHist->SetAxisRange(0, tmpHist->GetMaximum()*1.5, "Y");
     }else{
        tmpHist->SetAxisRange(1e-1, tmpHist->GetMaximum()*32*5, "Y");
     }

     if( keyStringT.Contains("Data") || keyStringT.Contains("Signal") ){
        tmpHist->Draw("e");
     }else{
        tmpHist->Draw("hist");
     }
     
     if( !keyStringT.Contains("Data") && !keyStringT.Contains("Signal") ){
        stackedKeyStringTVec.push_back(keyStringT);
        if( h1_stackedVec.empty() ){
           h1_stackedVec.push_back( (TH1D*) tmpHist->Clone() ); 
           h1_stackedVec.back()->SetFillColor( colorCachedVec[it] ); 
           h1_stackedVec.back()->SetLineColor( colorCachedVec[it] ); 
           h1_stackedVec.back()->SetMarkerColor( colorCachedVec[it] ); 
        }else{
           TH1D *tmpSumHist = (TH1D*) tmpHist->Clone();
           tmpSumHist->Add(h1_stackedVec.back(), 1); 
           h1_stackedVec.push_back( (TH1D*) tmpSumHist->Clone() ); 
           h1_stackedVec.back()->SetFillColor( colorCachedVec[it] ); 
           h1_stackedVec.back()->SetLineColor( colorCachedVec[it] ); 
           h1_stackedVec.back()->SetMarkerColor( colorCachedVec[it] ); 
        }
     }
     if( keyStringT.Contains("Data") ){ h1_dataCached = (TH1D*) tmpHist->Clone(); }
     if( keyStringT.Contains("Signal") ){
        if( !h1_signal1Cached ) h1_signal1Cached = (TH1D*) tmpHist->Clone();
        else h1_signal2Cached = (TH1D*) tmpHist->Clone();
     }

  }

  for(int ic=cntPadIdx+1; ic<=lastPadIdx; ic++){ cs->cd(ic); TPad * pad = (TPad*) cs->GetPad(ic); pad->Clear(); pad->SetLogy(statusLogy); }

  Float_t legendX1 = .60;
  Float_t legendX2 = .85;
  Float_t legendY1 = .55;
  Float_t legendY2 = .85;
  TLegend* catLeg1 = new TLegend(legendX1,legendY1,legendX2,legendY2);
  catLeg1->SetTextSize(0.030);

  cs->cd(lastPadIdx);
/*
  if( !statusLogy ){
     h1_dataCached->SetAxisRange(0, h1_dataCached->GetMaximum()*1.5, "Y");
  }else{
     h1_dataCached->SetAxisRange(1e-1, h1_dataCached->GetMaximum()*32, "Y");
  }
*/

  if( h1_dataCached ){
     double dataIntegral = h1_dataCached->Integral();
     double sumTotIntegral = h1_stackedVec.back()->Integral();
     double normScale = dataIntegral/sumTotIntegral;
   
     h1_dataCached->Draw("e");
     catLeg1->AddEntry(h1_dataCached, "Data");
     for(unsigned int is=0; is<h1_stackedVec.size(); is++){
        unsigned int ivsIdx = h1_stackedVec.size()-is-1;
        TH1D * tmpStacked = (TH1D*) h1_stackedVec[ivsIdx]->Clone();
        if( doNormalization ) tmpStacked->Scale(normScale);
        tmpStacked->Draw("hist same");
        catLeg1->AddEntry(tmpStacked, stackedKeyStringTVec[ivsIdx]);
     }
     h1_signal1Cached->SetLineColor(kRed); h1_signal1Cached->SetMarkerColor(kRed); h1_signal1Cached->SetLineStyle(3); 
     h1_signal1Cached->Draw("same");
     h1_dataCached->Draw("same e");
   
     catLeg1->AddEntry(h1_signal1Cached, "Signal");
     catLeg1->SetFillColor(kWhite);
     catLeg1->SetBorderSize(0);
     catLeg1->Draw();
   
     TPad *lastPad = (TPad*) cs->GetPad(lastPadIdx);
     lastPad->RedrawAxis();
  }

}

int countJets(const vector<TLorentzVector> &inputJets, const double *jetCutsArr){
   return countJets(inputJets, jetCutsArr[0], jetCutsArr[1], jetCutsArr[2], jetCutsArr[3]);
}

int countJets(const vector<TLorentzVector> &inputJets, const double minAbsEta, const double maxAbsEta, const double minPt, const double maxPt){

   int cntNJets =0;
   for(unsigned int ij=0; ij<inputJets.size(); ij++){
      double perjetpt = inputJets[ij].Pt(), perjeteta = inputJets[ij].Eta();
      if(   ( minAbsEta == -1 || fabs(perjeteta) >= minAbsEta )
         && ( maxAbsEta == -1 || fabs(perjeteta) < maxAbsEta )
         && (     minPt == -1 || perjetpt >= minPt )
         && (     maxPt == -1 || perjetpt < maxPt ) ){
         cntNJets ++;
      }
   }
   return cntNJets;
}

vector<double> calcDPhi(const vector<TLorentzVector> &inputJets, const double metphi, const int nDPhi, const double *jetCutsArr){
   return calcDPhi(inputJets, metphi, nDPhi, jetCutsArr[0], jetCutsArr[1], jetCutsArr[2], jetCutsArr[3]);
}

vector<double> calcDPhi(const vector<TLorentzVector> &inputJets, const double metphi, const int nDPhi, const double minAbsEta, const double maxAbsEta, const double minPt, const double maxPt){

   int cntNJets =0;
   vector<double> outDPhiVec(nDPhi, 999);
   for(unsigned int ij=0; ij<inputJets.size(); ij++){
      double perjetpt = inputJets[ij].Pt(), perjeteta = inputJets[ij].Eta();
      if(   ( minAbsEta == -1 || fabs(perjeteta) >= minAbsEta )
         && ( maxAbsEta == -1 || fabs(perjeteta) < maxAbsEta )
         && (     minPt == -1 || perjetpt >= minPt )
         && (     maxPt == -1 || perjetpt < maxPt ) ){

         if( cntNJets < nDPhi ){
            double perDPhi = fabs(TVector2::Phi_mpi_pi( inputJets[ij].Phi() - metphi ));
            outDPhiVec[cntNJets] = perDPhi;
         }
         cntNJets ++;
      }
   }

   return outDPhiVec;
}

int countCSVS(const vector<TLorentzVector> &inputJets, const vector<double> &inputCSVS, const double CSVS, const double *jetCutsArr){
   return countCSVS(inputJets, inputCSVS, CSVS, jetCutsArr[0], jetCutsArr[1], jetCutsArr[2], jetCutsArr[3]);
}

int countCSVS(const vector<TLorentzVector> &inputJets, const vector<double> &inputCSVS, const double CSVS, const double minAbsEta, const double maxAbsEta, const double minPt, const double maxPt){

   int cntNJets =0;
   for(unsigned int ij=0; ij<inputJets.size(); ij++){
      double perjetpt = inputJets[ij].Pt(), perjeteta = inputJets[ij].Eta();
      if(   ( minAbsEta == -1 || fabs(perjeteta) >= minAbsEta )
         && ( maxAbsEta == -1 || fabs(perjeteta) < maxAbsEta )
         && (     minPt == -1 || perjetpt >= minPt )
         && (     maxPt == -1 || perjetpt < maxPt ) ){

         if( inputCSVS[ij] > CSVS ) cntNJets ++;
      }
   }
   return cntNJets;
}

int adjustbJetsCSVS(const vector<TLorentzVector> &inputJets, vector<double> &inputCSVS, const double CSVS, const double *jetCutsArr){
   return adjustbJetsCSVS(inputJets, inputCSVS, CSVS, jetCutsArr[0], jetCutsArr[1], jetCutsArr[2], jetCutsArr[3]);
}

int adjustbJetsCSVS(const vector<TLorentzVector> &inputJets, vector<double> &inputCSVS, const double CSVS, const double minAbsEta, const double maxAbsEta, const double minPt, const double maxPt){

   int adjustJetIdx = -1;
   double maxCSVS = -1;
   for(unsigned int ij=0; ij<inputJets.size(); ij++){
      double perjetpt = inputJets[ij].Pt(), perjeteta = inputJets[ij].Eta();
      if(   ( minAbsEta == -1 || fabs(perjeteta) >= minAbsEta )
         && ( maxAbsEta == -1 || fabs(perjeteta) < maxAbsEta )
         && (     minPt == -1 || perjetpt >= minPt )
         && (     maxPt == -1 || perjetpt < maxPt ) ){

         if( adjustJetIdx == -1 ){ maxCSVS = inputCSVS[ij]; adjustJetIdx = ij; }
         else if( maxCSVS < inputCSVS[ij] ){ maxCSVS = inputCSVS[ij]; adjustJetIdx = ij; }
      }
   }
   if( maxCSVS >= CSVS ){
      std::cout<<"ERROR ... adjustbJetsCSVS : already found jets with maxCSVS : "<<maxCSVS<<"  larger than the CSVS cut : "<<CSVS<<std::endl;
      return -1;
   }
   if( adjustJetIdx != -1 ){
      inputCSVS[adjustJetIdx] = 1.0;
   }

   return adjustJetIdx;
}
